@* @model List<InventoryBeginners.Models.CartItem>

<h2>Shopping Cart</h2>

@if (Model.Count == 0)
{
    <p>Your cart is empty. <a asp-action="Index" asp-controller="Home">Start shopping</a>.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                
                <th>Product Code</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    
                    <td>@item.ProductCode</td>
                    <td>@item.ProductName</td>
                    <td>@item.Price</td>
                    <td>@item.Quantity</td>
                    <td>@item.Total()</td>
                    <td>
                        <a asp-action="RemoveFromCart" asp-route-cartItemId="@item.ProductCode">Remove</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    
    <div class="clearfix">
        <div class="float-right">
            <p>Total: @Model.Sum(item => item.Total())</p>

            <p><a asp-controller="Order" asp-action="Order" asp-route-cart="@Model" class="btn btn-primary" style="background-color:#DFBA4E;color:black;">Place Order</a></p>
        </div>
    </div>
            
}
 *@
@model InventoryBeginners.Models.ShoppingCart
@using Microsoft.AspNetCore.Identity
@using InventoryBeginners.Models

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
<!DOCTYPE html>
<html lang="en">
<head>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
</head>
<body>
<h2>Shopping Cart</h2>
@if (SignInManager.IsSignedIn(User) && User.IsInRole("User"))
            {
                string userId = "";

                if (User.Identity.IsAuthenticated)
                {
                    // Utilize HttpContext.RequestServices to access the IServiceProvider
                    var userManager = Context.RequestServices.GetService(typeof(UserManager<IdentityUser>)) as UserManager<IdentityUser>;

                    // Ensure that user is correctly typed as IdentityUser and use await with GetUserAsync
                    var user = await userManager.GetUserAsync(User);

                    // Exemple : Obtenez l'ID de l'utilisateur
        Model.UserId = user?.Id;
        
    }
}

@if (Model != null && Model.Items.Any())
{
    <table class="table">
        <thead>
            <tr>

                <th>Product Code</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        @{
    List<CartItem> Items2  = new List<CartItem>();
        }
        <tbody>
            @foreach (var item in Model.Items)
            {
                Items2.Add(item);
                <tr>
                   
                    <td>
                        @item.ProductCode
                    </td>
                    <td>
                        @item.ProductName
                    </td>
                    <td>
                        @item.Price
                    </td>
                    <td>
                        @item.Quantity
                    </td>
                    <td>
                        @item.Total()
                    </td>
                    <td>
                        <a asp-action="RemoveFromCart" asp-route-cartItemId="@item.ProductCode">Remove</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="clearfix">
        <div class="float-left">
            <a a asp-action="Index" asp-controller="Home">Continue Shopping</a>
        </div>
        <div class="float-right">
            @{
                decimal x = 0;

                foreach (var item in Model.Items)
                { x += item.Total(); }
                <p>Total : @x</p>

            }
            @{
                Model.Total = x;
            }
            <p>
                <form asp-controller="Order" asp-action="Order" method="post" id="orderForm" onsubmit="showNotification()">
                    <input type="hidden" name="UserId" value="@Model.UserId" />
                        <input type="hidden" id="hiddenX" name="g" value="0" />
                     
                      
                            <!-- Hidden input for 'f' -->
                            @for (var i = 0; i < Model.Items.Count; i++)
                    {
                        <input type="hidden" name="Items[@i].CartItemId" value="@Model.Items[i].CartItemId" />
                        <input type="hidden" name="Items[@i].ProductCode" value="@Model.Items[i].ProductCode" />
                        <input type="hidden" name="Items[@i].ProductName" value="@Model.Items[i].ProductName" />
                        <input type="hidden" name="Items[@i].Price" value="@Model.Items[i].Price" />
                            <input type="hidden" name="Items[@i].Quantity" value="@Model.Items[i].Quantity" />
                            
                        }

                    <input type="hidden" name="Total" value="@Model.Total" />

                    <button type="submit" class="btn" style="background-color:#DFBA4E;color:black;">
                        Place Order
                    </button>
                      
                    
                </form>

                
                


            </p>
        </div>
    </div>
}
else
{
    <p>Your cart is empty. <a asp-action="Index" asp-controller="Home">Start shopping</a>.</p>
}


    <script>
        document.getElementById('orderForm').addEventListener('submit', function (event) {
            // Empêcher la soumission automatique du formulaire
            event.preventDefault();



            // Display the value of 'x'



            // Utiliser SweetAlert pour une boîte de dialogue modale stylisée
            Swal.fire({
                icon: 'success',
                title: 'Order placed successfully!',
                text: 'Thank you for your order',
                showConfirmButton: false, // Masquer le bouton "OK"
                timer: 1500, // Fermer la notification après 1,5 seconde
                onClose: () => {
                    // Soumettre le formulaire après la fermeture de l'alerte
                    document.getElementById('orderForm').submit();
      

                        }
            });
        });
    </script>



</body>
</html>